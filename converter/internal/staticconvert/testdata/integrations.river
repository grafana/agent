prometheus.exporter.apache "integrations_apache_http" {
	scrape_uri = "http://0.0.0.0/server-status?auto"
}

prometheus.scrape "integrations_apache_http" {
	targets    = prometheus.exporter.apache.integrations_apache_http.targets
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/apache_http"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.remote_write "integrations" {
	endpoint {
		url = "http://localhost:9009/api/prom/push"

		queue_config { }

		metadata_config { }
	}
}

prometheus.exporter.blackbox "integrations_blackbox" {
	target "example" {
		address = "http://example.com"
		module  = "http_2xx"
	}
	probe_timeout_offset = "0s"
}

prometheus.scrape "integrations_blackbox" {
	targets    = prometheus.exporter.blackbox.integrations_blackbox.targets
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/blackbox"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.snmp "integrations_snmp" {
	target "network_switch_1" {
		address     = "192.168.1.2"
		module      = "if_mib"
		auth        = "public"
		walk_params = "public"
	}

	target "network_router_2" {
		address     = "192.168.1.3"
		module      = "mikrotik"
		auth        = "private"
		walk_params = "private"
	}
}

prometheus.scrape "integrations_snmp" {
	targets    = prometheus.exporter.snmp.integrations_snmp.targets
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/snmp"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.azure "integrations_azure_exporter" {
	subscriptions = ["subId"]
	resource_type = "Microsoft.Dashboard/grafana"
	metrics       = ["HttpRequestCount"]
}

prometheus.scrape "integrations_azure_exporter" {
	targets    = prometheus.exporter.azure.integrations_azure_exporter.targets
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/azure_exporter"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.cadvisor "integrations_cadvisor" { }

prometheus.scrape "integrations_cadvisor" {
	targets    = prometheus.exporter.cadvisor.integrations_cadvisor.targets
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/cadvisor"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.cloudwatch "integrations_cloudwatch_exporter" {
	sts_region    = "us-east-2"
	fips_disabled = false

	discovery {
		regions     = ["us-east-2"]
		custom_tags = {}
		search_tags = {}
		type        = "AWS/EC2"

		metric {
			name        = "CPUUtilization"
			statistics  = ["Average"]
			period      = "5m0s"
			nil_to_zero = false
		}

		metric {
			name       = "NetworkPacketsIn"
			statistics = ["Average"]
			period     = "5m0s"
		}
		nil_to_zero = true
	}

	static "single_ec2_instance" {
		regions     = ["us-east-2"]
		custom_tags = {}
		namespace   = "AWS/EC2"
		dimensions  = {
			InstanceId = "i-0e43cee369aa44b52",
		}

		metric {
			name        = "CPUUtilization"
			statistics  = ["Average"]
			period      = "5m0s"
			nil_to_zero = false
		}

		metric {
			name       = "NetworkPacketsIn"
			statistics = ["Average"]
			period     = "5m0s"
		}
		nil_to_zero = true
	}

	decoupled_scraping { }
}

prometheus.scrape "integrations_cloudwatch_exporter" {
	targets    = prometheus.exporter.cloudwatch.integrations_cloudwatch_exporter.targets
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/cloudwatch_exporter"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.consul "integrations_consul_exporter" { }

prometheus.scrape "integrations_consul_exporter" {
	targets    = prometheus.exporter.consul.integrations_consul_exporter.targets
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/consul_exporter"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.dnsmasq "integrations_dnsmasq_exporter" {
	address = "dnsmasq-a:53"
}

discovery.relabel "integrations_dnsmasq_exporter" {
	targets = prometheus.exporter.dnsmasq.integrations_dnsmasq_exporter.targets

	rule {
		source_labels = ["__address__"]
		target_label  = "instance"
		replacement   = "dnsmasq-a"
	}
}

prometheus.scrape "integrations_dnsmasq_exporter" {
	targets    = discovery.relabel.integrations_dnsmasq_exporter.output
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/dnsmasq_exporter"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.elasticsearch "integrations_elasticsearch_exporter" { }

prometheus.scrape "integrations_elasticsearch_exporter" {
	targets    = prometheus.exporter.elasticsearch.integrations_elasticsearch_exporter.targets
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/elasticsearch_exporter"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.gcp "integrations_gcp_exporter" {
	project_ids      = ["<project_id>"]
	metrics_prefixes = ["loadbalancing.googleapis.com/https/request_bytes_count", "loadbalancing.googleapis.com/https/total_latencies"]
	extra_filters    = ["loadbalancing.googleapis.com:resource.labels.backend_target_name=\"sample-value\""]
}

prometheus.scrape "integrations_gcp_exporter" {
	targets    = prometheus.exporter.gcp.integrations_gcp_exporter.targets
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/gcp_exporter"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.github "integrations_github_exporter" {
	repositories = ["grafana/agent", "grafana/agent-modules"]
	api_token    = "ABCDEFGH-1234-ABCD-1234-ABCDEFGHIJKL"
}

prometheus.scrape "integrations_github_exporter" {
	targets    = prometheus.exporter.github.integrations_github_exporter.targets
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/github_exporter"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.kafka "integrations_kafka_exporter" { }

prometheus.scrape "integrations_kafka_exporter" {
	targets    = prometheus.exporter.kafka.integrations_kafka_exporter.targets
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/kafka_exporter"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.memcached "integrations_memcached_exporter" {
	address = "memcached-a:53"
}

discovery.relabel "integrations_memcached_exporter" {
	targets = prometheus.exporter.memcached.integrations_memcached_exporter.targets

	rule {
		source_labels = ["__address__"]
		target_label  = "instance"
		replacement   = "memcached-a"
	}
}

prometheus.scrape "integrations_memcached_exporter" {
	targets    = discovery.relabel.integrations_memcached_exporter.output
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/memcached_exporter"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.mongodb "integrations_mongodb_exporter" {
	mongodb_uri    = "mongodb://mongodb-a:27017"
	direct_connect = true
}

discovery.relabel "integrations_mongodb_exporter" {
	targets = prometheus.exporter.mongodb.integrations_mongodb_exporter.targets

	rule {
		source_labels = ["__address__"]
		target_label  = "service_name"
		replacement   = "replicaset1-node1"
	}

	rule {
		source_labels = ["__address__"]
		target_label  = "mongodb_cluster"
		replacement   = "prod-cluster"
	}
}

prometheus.scrape "integrations_mongodb_exporter" {
	targets    = discovery.relabel.integrations_mongodb_exporter.output
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/mongodb_exporter"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.mssql "integrations_mssql" {
	connection_string = "sqlserver://<USERNAME>:<PASSWORD>@<HOST>:<PORT>"
}

prometheus.scrape "integrations_mssql" {
	targets    = prometheus.exporter.mssql.integrations_mssql.targets
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/mssql"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.mysql "integrations_mysqld_exporter" {
	data_source_name = "root@(server-a:3306)/"
}

discovery.relabel "integrations_mysqld_exporter" {
	targets = prometheus.exporter.mysql.integrations_mysqld_exporter.targets

	rule {
		source_labels = ["__address__"]
		target_label  = "instance"
		replacement   = "server-a"
	}
}

prometheus.scrape "integrations_mysqld_exporter" {
	targets    = discovery.relabel.integrations_mysqld_exporter.output
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/mysqld_exporter"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.unix "default" { }

discovery.relabel "integrations_node_exporter" {
	targets = prometheus.exporter.unix.default.targets

	rule {
		source_labels = ["__address__"]
		target_label  = "__param_id"
	}

	rule {
		source_labels = ["__param_id"]
		target_label  = "thermostat"
	}

	rule {
		target_label = "__address__"
		replacement  = "localhost:8099"
	}
}

prometheus.scrape "integrations_node_exporter" {
	targets    = discovery.relabel.integrations_node_exporter.output
	forward_to = [prometheus.relabel.integrations_node_exporter.receiver]
	job_name   = "integrations/node_exporter"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.relabel "integrations_node_exporter" {
	forward_to = [prometheus.remote_write.integrations.receiver]

	rule {
		source_labels = ["__metric_address1__"]
		target_label  = "__metric_param_target1"
	}

	rule {
		source_labels = ["__metric_address2__"]
		target_label  = "__metric_param_target2"
	}
}

prometheus.exporter.oracledb "integrations_oracledb" {
	connection_string = "oracle://user:password@localhost:1521/orcl.localnet"
}

prometheus.scrape "integrations_oracledb" {
	targets        = prometheus.exporter.oracledb.integrations_oracledb.targets
	forward_to     = [prometheus.remote_write.integrations.receiver]
	job_name       = "integrations/oracledb"
	scrape_timeout = "1m0s"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.postgres "integrations_postgres_exporter" {
	data_source_names = ["postgres://postgres:password@localhost:5432/postgres?sslmode=disable"]
}

discovery.relabel "integrations_postgres_exporter" {
	targets = prometheus.exporter.postgres.integrations_postgres_exporter.targets

	rule {
		source_labels = ["__address__"]
		target_label  = "instance"
		replacement   = "postgres-a"
	}
}

prometheus.scrape "integrations_postgres_exporter" {
	targets    = discovery.relabel.integrations_postgres_exporter.output
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/postgres_exporter"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.process "integrations_process_exporter" {
	matcher {
		name    = "{{.Comm}}"
		cmdline = [".+"]
	}
}

prometheus.scrape "integrations_process_exporter" {
	targets    = prometheus.exporter.process.integrations_process_exporter.targets
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/process_exporter"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.redis "integrations_redis_exporter" {
	redis_addr        = "redis-2:6379"
	export_key_values = false
}

discovery.relabel "integrations_redis_exporter" {
	targets = prometheus.exporter.redis.integrations_redis_exporter.targets

	rule {
		source_labels = ["__address__"]
		target_label  = "instance"
		replacement   = "redis-2"
	}
}

prometheus.scrape "integrations_redis_exporter" {
	targets    = discovery.relabel.integrations_redis_exporter.output
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/redis_exporter"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.snowflake "integrations_snowflake" {
	account_name = "XXXXXXX-YYYYYYY"
	username     = "snowflake-user"
	password     = "snowflake-pass"
	warehouse    = "SNOWFLAKE_WAREHOUSE"
}

prometheus.scrape "integrations_snowflake" {
	targets    = prometheus.exporter.snowflake.integrations_snowflake.targets
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/snowflake"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.squid "integrations_squid" {
	address = "localhost:3128"
}

prometheus.scrape "integrations_squid" {
	targets        = prometheus.exporter.squid.integrations_squid.targets
	forward_to     = [prometheus.remote_write.integrations.receiver]
	job_name       = "integrations/squid"
	scrape_timeout = "1m0s"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}

prometheus.exporter.statsd "integrations_statsd_exporter" { }

prometheus.scrape "integrations_statsd_exporter" {
	targets    = prometheus.exporter.statsd.integrations_statsd_exporter.targets
	forward_to = [prometheus.remote_write.integrations.receiver]
	job_name   = "integrations/statsd_exporter"

	tls_config {
		ca_file   = "/something7.cert"
		cert_file = "/something8.cert"
		key_file  = "/something9.cert"
	}
}
