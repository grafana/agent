discovery.azure "metrics_agent_promobee" {
	subscription_id = "subscription1"

	oauth {
		client_id     = "client"
		tenant_id     = "tenant"
		client_secret = "secret"
	}

	managed_identity {
		client_id = "client"
	}
	proxy_url        = "proxy"
	follow_redirects = true
	enable_http2     = true
}

discovery.azure "metrics_agent_promobee_2" {
	subscription_id = "subscription2"

	oauth {
		client_id     = "client"
		tenant_id     = "tenant"
		client_secret = "secret"
	}

	managed_identity {
		client_id = "client"
	}
	proxy_url        = "proxy"
	follow_redirects = true
	enable_http2     = true
}

discovery.relabel "metrics_agent_promobee" {
	targets = concat(
		discovery.azure.metrics_agent_promobee.targets,
		discovery.azure.metrics_agent_promobee_2.targets,
		[{
			__address__ = "localhost:9090",
		}],
	)

	rule {
		source_labels = ["__address__"]
		target_label  = "__param_id"
	}

	rule {
		source_labels = ["__param_id"]
		target_label  = "thermostat"
	}

	rule {
		target_label = "__address__"
		replacement  = "localhost:8099"
	}
}

prometheus.scrape "metrics_agent_prometheus" {
	targets = concat(
		[{
			__address__ = "localhost:9099",
		}],
		[{
			__address__ = "localhost:9101",
		}],
	)
	forward_to     = [prometheus.remote_write.metrics_agent.receiver]
	job_name       = "prometheus"
	scrape_timeout = "45s"
}

prometheus.scrape "metrics_agent_promobee" {
	targets        = discovery.relabel.metrics_agent_promobee.output
	forward_to     = [prometheus.relabel.metrics_agent_promobee.receiver]
	job_name       = "promobee"
	scrape_timeout = "45s"
	metrics_path   = "/thermostat"
}

prometheus.relabel "metrics_agent_promobee" {
	forward_to = [prometheus.remote_write.metrics_agent.receiver]

	rule {
		source_labels = ["__metric_address1__"]
		target_label  = "__metric_param_target1"
	}

	rule {
		source_labels = ["__metric_address2__"]
		target_label  = "__metric_param_target2"
	}
}

prometheus.remote_write "metrics_agent" {
	endpoint {
		name = "agent-6ea089"
		url  = "https://prometheus-us-central1.grafana.net/api/prom/push"

		basic_auth {
			username = "11111"
			password = "my-secret-password-here"
		}

		queue_config {
			max_shards          = 10
			batch_send_deadline = "3m0s"
			max_backoff         = "10s"
		}

		metadata_config { }
	}
}

logging {
	level  = "debug"
	format = "json"
}

http {
	tls {
		cert_file        = "./testdata/example-cert.pem"
		key_file         = "./testdata/example-key.pem"
		client_ca_file   = "./testdata/example-cert.pem"
		client_auth_type = "VerifyClientCertIfGiven"
	}
}
