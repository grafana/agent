---
kind: pipeline
type: docker
name: Create Linux build image
platform:
  os: linux
  arch: amd64
trigger:
  event: [tag]
  ref: [refs/tags/build-image/v*]
steps:
  - name: Build
    image: docker
    volumes:
      - name: docker
        path: /var/run/docker.sock
    environment:
      DOCKER_LOGIN:
        from_secret: DOCKER_LOGIN
      DOCKER_PASSWORD:
        from_secret: DOCKER_PASSWORD
    commands:
    - export IMAGE_TAG=${DRONE_TAG##build-image/v}
    - docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
    - docker build -t grafana/agent-build-image:$IMAGE_TAG ./build-image
    - docker push grafana/agent-build-image:$IMAGE_TAG
volumes:
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
type: docker
name: Create Windows build image
platform:
  os: windows
  arch: amd64
  version: "1809"
trigger:
  event: [tag]
  ref: [refs/tags/build-image/v*]
steps:
  - name: Build
    image: docker:windowsservercore-1809
    volumes:
      - name: docker
        path: //./pipe/docker_engine/
    environment:
      DOCKER_LOGIN:
        from_secret: DOCKER_LOGIN
      DOCKER_PASSWORD:
        from_secret: DOCKER_PASSWORD
    commands:
      # NOTE(rfratto): the variable syntax is parsed ahead of time by Drone,
      # and not by Windows (where the syntax obviously wouldn't work).
      - $IMAGE_TAG="${DRONE_TAG##build-image/v}-windows"
      - docker login -u $Env:DOCKER_LOGIN -p $Env:DOCKER_PASSWORD
      - docker build -t grafana/agent-build-image:$IMAGE_TAG ./build-image/windows
      - docker push grafana/agent-build-image:$IMAGE_TAG
volumes:
- name: docker
  host:
    path: //./pipe/docker_engine/

---
kind: pipeline
name: Lint
platform:
  os: linux
  arch: amd64
trigger:
  event:
    - push
    - pull_request
    - tag
  ref:
    - refs/heads/main
    - refs/pull/*/head
    - refs/tags/v*

steps:
  - name: lint
    image: golangci/golangci-lint:v1.46
    commands:
      - apt-get update -y && apt-get install -y libsystemd-dev libbpfcc-dev
      - make DOCKER_OPTS="" lint

---
kind: pipeline
type: docker
name: Test
platform:
  os: linux
  arch: amd64
trigger:
  event:
    - push
    - pull_request
    - tag
  ref:
    - refs/heads/main
    - refs/pull/*/head
    - refs/tags/v*

steps:
  - name: test
    image: rfratto/seego
    volumes:
      - name: docker
        path: /var/run/docker.sock
    commands:
      - apt-get update &&  apt-get install -y rubygems rpm nsis apt-transport-https ca-certificates curl gnupg lsb-release libbpfcc-dev
      - gem install --no-document fpm
      - rm -r /usr/local/go
      - mkdir -p /usr/local/go/bin
      - wget -q https://golang.org/dl/go1.18.linux-amd64.tar.gz
      - tar -C /usr/local -xzf go1.18.linux-amd64.tar.gz
      - rm go1.18.linux-amd64.tar.gz
      - export PATH=$PATH:/usr/local/go/bin
      - make DOCKER_OPTS="" cmd/agent/agent cmd/agentctl/agentctl cmd/agent-operator/agent-operator tools/crow/grafana-agent-crow tools/smoke/grafana-agent-smoke
      - make DOCKER_OPTS="" K8S_USE_DOCKER_NETWORK=1 DRONE=true BUILD_IN_CONTAINER=false test

volumes:
 - name: docker
   host:
     path: /var/run/docker.sock
---
kind: pipeline
type: docker
name: Windows-Test
platform:
  arch: amd64
  os: windows
  version: "1809"
trigger:
  event:
    - push
    - pull_request
    - tag
  ref:
    - refs/heads/main
    - refs/pull/*/head
    - refs/tags/v*
steps:
  - name: test
    image: grafana/agent-build-image:0.14.0-windows
    commands:
      - go test -tags="nodocker,nonetwork" ./...
---
kind: pipeline
type: docker
name: Containerize
platform:
  os: linux
  arch: amd64
trigger:
  ref:
    - refs/heads/main
    - refs/tags/v*
    - refs/heads/dev.*
steps:
  - name: Build Containers
    image: docker
    volumes:
      - name: docker
        path: /var/run/docker.sock
    environment:
      DOCKER_LOGIN:
        from_secret: DOCKER_LOGIN
      DOCKER_PASSWORD:
        from_secret: DOCKER_PASSWORD
      GCR_CREDS:
        from_secret: gcr_admin
    commands:
      - mkdir -p $HOME/.docker
      - printenv GCR_CREDS > $HOME/.docker/config.json
      - docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
      - apk update && apk add make bash wget git qemu
      - wget -q https://github.com/docker/buildx/releases/download/v0.5.1/buildx-v0.5.1.linux-amd64
      - mkdir -p ~/.docker/cli-plugins
      - cp buildx-v0.5.1.linux-amd64 ~/.docker/cli-plugins/docker-buildx
      - chmod a+x ~/.docker/cli-plugins/docker-buildx
      - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - docker buildx create --name multiarch --driver docker-container --use
      - export RELEASE_TAG=${DRONE_TAG}
      - export IMAGE_BRANCH_TAG=${DRONE_BRANCH}
      - make DOCKER_OPTS="" DRONE=true CROSS_BUILD=true BUILD_IN_CONTAINER=true RELEASE_BUILD=true agent-image
      - make DOCKER_OPTS="" DRONE=true CROSS_BUILD=true BUILD_IN_CONTAINER=true RELEASE_BUILD=true agentctl-image
      - make DOCKER_OPTS="" DRONE=true CROSS_BUILD=true BUILD_IN_CONTAINER=true RELEASE_BUILD=true agent-operator-image
      - make DOCKER_OPTS="" DRONE=true CROSS_BUILD=true BUILD_IN_CONTAINER=true RELEASE_BUILD=true grafana-agent-crow-image
      - make DOCKER_OPTS="" DRONE=true CROSS_BUILD=true BUILD_IN_CONTAINER=true RELEASE_BUILD=true agent-smoke-image
      - docker buildx rm multiarch

depends_on:
  - Test

volumes:
  - name: docker
    host:
      path: /var/run/docker.sock
---
kind: pipeline
type: docker
name: Deploy-To-Deployment-Tools
platform:
  os: linux
  arch: amd64
trigger:
  ref:
    - refs/heads/main

image_pull_secrets:
  - dockerconfigjson

steps:
  - name: put image tag in a file
    image: alpine
    commands:
      - apk update && apk add git
      - echo "$(sh ./tools/image-tag)" > .tag-only
      - echo "grafana/agent:$(sh ./tools/image-tag)" > .image-tag
  - name: Update Deployment Tools
    image: us.gcr.io/kubernetes-dev/drone/plugins/updater
    settings:
      config_json: |-
        {
          "destination_branch": "master",
          "pull_request_branch_prefix": "cd-agent",
          "pull_request_enabled": false,
          "pull_request_team_reviewers": [
            "agent-squad"
          ],
          "repo_name": "deployment_tools",
          "update_jsonnet_attribute_configs": [
            {
              "file_path": "ksonnet/environments/kowalski/dev-us-central-0.kowalski-dev/main.jsonnet",
              "jsonnet_key": "agent_image",
              "jsonnet_value_file": ".image-tag"
            },
            {
              "file_path": "ksonnet/environments/grafana-agent/waves/agent.libsonnet",
              "jsonnet_key": "dev_canary",
              "jsonnet_value_file": ".image-tag"
            },
            {
              "file_path": "ksonnet/environments/agent-smoke-test/dev-us-central-0.agent-smoke-test/main.jsonnet",
              "jsonnet_key": "image_tag",
              "jsonnet_value_file": ".tag-only"
            }
          ]
        }
      github_token:
        from_secret: gh_token

depends_on:
  - Containerize

volumes:
  - name: docker
    host:
      path: /var/run/docker.sock
---
kind: pipeline
type: docker
name: Release
platform:
  os: linux
  arch: amd64
trigger:
  ref:
    - refs/tags/v*

steps:
  - name: create-release
    image: rfratto/seego
    volumes:
      - name: docker
        path: /var/run/docker.sock
    environment:
      DOCKER_LOGIN:
        from_secret: DOCKER_LOGIN
      DOCKER_PASSWORD:
        from_secret: DOCKER_PASSWORD
      GITHUB_TOKEN:
        from_secret: GITHUB_KEY
      GPG_PRIVATE_KEY:
        from_secret: gpg_private_key
      GPG_PUBLIC_KEY:
        from_secret: gpg_public_key
      GPG_PASSPHRASE:
        from_secret: gpg_passphrase
    commands:
      - apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
      - curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
      - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian bullseye stable"
      - apt-get update &&  apt-get install -y rubygems rpm nsis docker-ce docker-ce-cli containerd.io gettext
      - docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
      - gem install --no-document fpm
      - rm -r /usr/local/go
      - mkdir -p /usr/local/go/bin
      - wget -q https://golang.org/dl/go1.18.linux-amd64.tar.gz
      - tar -C /usr/local -xzf go1.18.linux-amd64.tar.gz
      - rm go1.18.linux-amd64.tar.gz
      - export PATH=$PATH:/usr/local/go/bin
      - go install github.com/mitchellh/gox@latest
      - go install github.com/tcnksm/ghr@latest
      - export PATH="$(go env GOPATH)/bin:$PATH"
      - make -j4 DOCKER_OPTS="" BUILD_IN_CONTAINER=false RELEASE_BUILD=true RELEASE_TAG=${DRONE_TAG} publish
depends_on:
  - Test

volumes:
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: secret
name: dockerconfigjson

get:
  path: secret/data/common/gcr
  name: .dockerconfigjson

---
kind: secret
name: gcr_admin

get:
  name: .dockerconfigjson
  path: infra/data/ci/gcr-admin

---
kind: secret
name: gh_token

get:
  path: infra/data/ci/github/grafanabot
  name: pat

---
kind: secret
name: gpg_public_key

get:
  name: public-key
  path: infra/data/ci/packages-publish/gpg

---
kind: secret
name: gpg_private_key

get:
  name: private-key
  path: infra/data/ci/packages-publish/gpg

---
kind: secret
name: gpg_passphrase

get:
  name: passphrase
  path: infra/data/ci/packages-publish/gpg

---
kind: signature
hmac: e0f7d15a7b573f8b29d9f115eed16f237b9dccfa6b4eb168c8c84770660c15b1

...
