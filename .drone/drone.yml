---
kind: pipeline
name: Lint
platform:
  os: linux
  arch: amd64

steps:
- name: lint
  image: golangci/golangci-lint:v1.37.1
  commands:
  - apt-get update -y && apt-get install -y libsystemd-dev
  - make lint
---
kind: pipeline
type: docker
name: Dist
platform:
  os: linux
  arch: amd64

steps:
- name: distribute
  image: rfratto/seego
  commands:
  - apt-get update &&  apt-get install -y rubygems rpm nsis
  - gem install --no-document fpm
  - mkdir -p /usr/local/go/bin
  - wget https://golang.org/dl/go1.16.5.linux-amd64.tar.gz
  - tar -C /usr/local -xzf go1.16.5.linux-amd64.tar.gz
  - rm go1.16.5.linux-amd64.tar.gz
  - export PATH=$PATH:/usr/local/go/bin
  - make BUILD_IN_CONTAINER=false RELEASE_TAG=v0.0.0 dist
---
kind: pipeline
type: docker
name: Release
platform:
  os: linux
  arch: amd64
trigger:
  event:
  - tag

steps:
- name: create-release
  image: rfratto/seego
  commands:
  - apt-get update &&  apt-get install -y rubygems rpm nsis
  - gem install --no-document fpm
  - mkdir -p /usr/local/go/bin
  - wget https://golang.org/dl/go1.16.5.linux-amd64.tar.gz
  - tar -C /usr/local -xzf go1.16.5.linux-amd64.tar.gz
  - rm go1.16.5.linux-amd64.tar.gz
  - export PATH=$PATH:/usr/local/go/bin
  - GO111MODULE=on go get -u github.com/mitchellh/gox github.com/tcnksm/ghr
  - export PATH="$(go env GOPATH)/bin:$PATH"
  - export RELEASE_TAG=${GITHUB_REF##*/}
  - make -j4 RELEASE_BUILD=true publish
- name: publish
  image: plugins/github-release
  environment:
    GITHUB_KEY:
      from_secret: GITHUB_KEY
  settings:
    api_key: ${GITHUB_KEY}
    files: /drone/src/dist/*
    draft: true
  when:
    event: tag
---
kind: pipeline
type: docker
name: ContainerizeNoDocker

steps:
- name: Build Artifacts
  image:  rfratto/seego
  commands:
  - apt-get update &&  apt-get install -y rubygems rpm nsis
  - gem install --no-document fpm
  - mkdir -p /usr/local/go/bin
  - wget https://golang.org/dl/go1.16.5.linux-amd64.tar.gz
  - tar -C /usr/local -xzf go1.16.5.linux-amd64.tar.gz
  - rm go1.16.5.linux-amd64.tar.gz
  - export PATH=$PATH:/usr/local/go/bin
  - GO111MODULE=on go get -u github.com/mitchellh/gox github.com/tcnksm/ghr
  - export PATH="$(go env GOPATH)/bin:$PATH"
  - make BUILD_IN_CONTAINER=false RELEASE_TAG=v0.0.0 dist-agent
  - make BUILD_IN_CONTAINER=false RELEASE_TAG=v0.0.0 dist-agentctl
- name: Package Agent Containers
  image: centos
  commands:
  - yum -y install buildah make
  - make agent-image
  - make agentctl-image


---
kind: pipeline
type: docker
name: Containerize
platform:
  os: linux
  arch: amd64

steps:
- name: Build Agent Container
  image: docker
  volumes:
  - name: docker
    path: /var/run/docker.sock
  commands:
  - apk update && apk add make bash wget git qemu
  - wget https://github.com/docker/buildx/releases/download/v0.5.1/buildx-v0.5.1.linux-amd64
  - mkdir -p ~/.docker/cli-plugins 
  - cp buildx-v0.5.1.linux-amd64 ~/.docker/cli-plugins/docker-buildx
  - chmod a+x ~/.docker/cli-plugins/docker-buildx
  - docker buildx create --use
  - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  - docker buildx create --name multiarch --driver docker-container --use
  - docker buildx inspect --bootstrap
  - docker buildx ls
  - CROSS_BUILD=true RELEASE_BUILD=true make agent-image
- name: Build Agentctl Container
  image: docker
  volumes:
  - name: docker
    path: /var/run/docker.sock
  commands:
  - apk update && apk add make bash wget git qemu
  - wget https://github.com/docker/buildx/releases/download/v0.5.1/buildx-v0.5.1.linux-amd64
  - mkdir -p ~/.docker/cli-plugins 
  - cp buildx-v0.5.1.linux-amd64 ~/.docker/cli-plugins/docker-buildx
  - chmod a+x ~/.docker/cli-plugins/docker-buildx
  - docker buildx create --use
  - CROSS_BUILD=true RELEASE_BUILD=true make agentctl-image

volumes:
- name: docker
  host: 
    path: /var/run/docker.sock
