---
kind: pipeline
type: docker
name: Create Linux build image
platform:
  os: linux
  arch: amd64
trigger:
  event: [tag]
  ref: [refs/tags/build-image/v*]
steps:
  - name: Build
    image: docker
    volumes:
      - name: docker
        path: /var/run/docker.sock
    environment:
      DOCKER_LOGIN:
        from_secret: DOCKER_LOGIN
      DOCKER_PASSWORD:
        from_secret: DOCKER_PASSWORD
    commands:
    - export IMAGE_TAG=${DRONE_TAG##build-image/v}
    - docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --name multiarch --driver docker-container --use
    - docker buildx build --push --platform linux/amd64,linux/arm64 -t grafana/agent-build-image:$IMAGE_TAG ./build-image
volumes:
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
type: docker
name: Create Windows build image
platform:
  os: windows
  arch: amd64
  version: "1809"
trigger:
  event: [tag]
  ref: [refs/tags/build-image/v*]
steps:
  - name: Build
    image: docker:windowsservercore-1809
    volumes:
      - name: docker
        path: //./pipe/docker_engine/
    environment:
      DOCKER_LOGIN:
        from_secret: DOCKER_LOGIN
      DOCKER_PASSWORD:
        from_secret: DOCKER_PASSWORD
    commands:
      # NOTE(rfratto): the variable syntax is parsed ahead of time by Drone,
      # and not by Windows (where the syntax obviously wouldn't work).
      - $IMAGE_TAG="${DRONE_TAG##build-image/v}-windows"
      - docker login -u $Env:DOCKER_LOGIN -p $Env:DOCKER_PASSWORD
      - docker build -t grafana/agent-build-image:$IMAGE_TAG ./build-image/windows
      - docker push grafana/agent-build-image:$IMAGE_TAG
volumes:
- name: docker
  host:
    path: //./pipe/docker_engine/

---
kind: pipeline
name: Lint
platform:
  os: linux
  arch: amd64
trigger:
  event:
    - push
    - pull_request
    - tag
  ref:
    - refs/heads/main
    - refs/pull/*/head
    - refs/tags/v*

steps:
  - name: lint
    image: grafana/agent-build-image:0.15.1
    commands:
      - make -f Makefile-v2.mk lint

---
kind: pipeline
type: docker
name: Test
platform:
  os: linux
  arch: amd64
trigger:
  event:
    - push
    - pull_request
    - tag
  ref:
    - refs/heads/main
    - refs/pull/*/head
    - refs/tags/v*

steps:
  - name: test
    image: grafana/agent-build-image:0.15.1
    volumes:
      - name: docker
        path: /var/run/docker.sock
    commands:
      - make -f Makefile-v2.mk binaries
      - K8S_USE_DOCKER_NETWORK=1 make -f Makefile-v2.mk test

volumes:
 - name: docker
   host:
     path: /var/run/docker.sock

---
kind: pipeline
type: docker
name: Windows-Test
platform:
  arch: amd64
  os: windows
  version: "1809"
trigger:
  event:
    - push
    - pull_request
    - tag
  ref:
    - refs/heads/main
    - refs/pull/*/head
    - refs/tags/v*
steps:
  - name: test
    image: grafana/agent-build-image:0.14.0-windows
    commands:
      - go test -tags="nodocker,nonetwork" ./...

---
kind: pipeline
type: docker
name: Containerize
platform:
  os: linux
  arch: amd64
trigger:
  ref:
    - refs/heads/main
    - refs/tags/v*
    - refs/heads/dev.*
steps:
  - name: Build Containers
    image: grafana/agent-build-image:0.15.1
    volumes:
      - name: docker
        path: /var/run/docker.sock
    environment:
      DOCKER_LOGIN:
        from_secret: DOCKER_LOGIN
      DOCKER_PASSWORD:
        from_secret: DOCKER_PASSWORD
      GCR_CREDS:
        from_secret: gcr_admin
    commands:
      - mkdir -p $HOME/.docker
      - printenv GCR_CREDS > $HOME/.docker/config.json
      - docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD

      # Create a buildx worker container for multiplatform builds.
      - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
      - docker buildx create --name multiarch --driver docker-container --use

      - |
        # If containers are being built as the result of a tag, force the
        # VERSION to come from the drone tag info.
        #
        # Otherwise, use the script to determine the tag.
        if [ ! -z "$DRONE_TAG" ]; then
          export VERISON=$DRONE_TAG
        else
          export VERSION=$(./tools/image-tag)
        fi

        # We also need to know which "branch tag" to update. If this is a
        # stable release (e.g., not a release candiate, we'll update :latest,
        # otherwise we update the branch name).
        #
        # If there's no branch, we'll default to the version. This means the
        # same Docker tag will be created twice, effectively turning the branch
        # tag into a no-op.
        if [ ! -z "$DRONE_TAG" ] && [[ "$DRONE_TAG" != *"-rc."* ]]; then
          export BRANCH_TAG=$DRONE_TAG
        elif [ ! -z "$DRONE_BRANCH" ]; then
          export BRANCH_TAG=$DRONE_BRANCH
        else
          export BRANCH_TAG=$VERSION
        fi

      - >-
        docker buildx build --push
        --platform linux/amd64,linux/arm64,linux/arm/v7,linux/ppc64le
        --build-arg RELEASE_BUILD=1
        --build-arg VERISON=$VERSION
        -t grafana/agent:$VERSION
        -t grafana/agent:$BRANCH_TAG
        -f cmd/agent/Dockerfile.new
        .

      - >-
        docker buildx build --push
        --platform linux/amd64,linux/arm64,linux/arm/v7,linux/ppc64le
        --build-arg RELEASE_BUILD=1
        --build-arg VERISON=$VERSION
        -t grafana/agentctl:$VERSION
        -t grafana/agentctl:$BRANCH_TAG
        -f cmd/agentctl/Dockerfile.new
        .

      - >-
        docker buildx build --push
        --platform linux/amd64,linux/arm64,linux/arm/v7,linux/ppc64le
        --build-arg RELEASE_BUILD=1
        --build-arg VERISON=$VERSION
        -t grafana/agent-operator:$VERSION
        -t grafana/agent-operator:$BRANCH_TAG
        -f cmd/agent-operator/Dockerfile.new
        .

      - >-
        docker buildx build --push
        --platform linux/amd64,linux/arm64,linux/arm/v7,linux/ppc64le
        --build-arg RELEASE_BUILD=1
        --build-arg VERISON=$VERSION
        -t us.gcr.io/kubernetes-dev/grafana/agent-crow:$VERSION
        -t us.gcr.io/kubernetes-dev/grafana/agent-crow:$BRANCH_TAG
        -f tools/crow/Dockerfile.new
        .

      - >-
        docker buildx build --push
        --platform linux/amd64,linux/arm64,linux/arm/v7,linux/ppc64le
        --build-arg RELEASE_BUILD=1
        --build-arg VERISON=$VERSION
        -t us.gcr.io/kubernetes-dev/grafana/agent-smoke:$VERSION
        -t us.gcr.io/kubernetes-dev/grafana/agent-smoke:$BRANCH_TAG
        -f tools/smoke/Dockerfile.new
        .

      - docker buildx rm multiarch

depends_on:
  - Test

volumes:
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
type: docker
name: Deploy-To-Deployment-Tools
platform:
  os: linux
  arch: amd64
trigger:
  ref:
    - refs/heads/main

image_pull_secrets:
  - dockerconfigjson

steps:
  - name: put image tag in a file
    image: alpine
    commands:
      - apk update && apk add git
      - echo "$(sh ./tools/image-tag)" > .tag-only
      - echo "grafana/agent:$(sh ./tools/image-tag)" > .image-tag
  - name: Update Deployment Tools
    image: us.gcr.io/kubernetes-dev/drone/plugins/updater
    settings:
      config_json: |-
        {
          "destination_branch": "master",
          "pull_request_branch_prefix": "cd-agent",
          "pull_request_enabled": false,
          "pull_request_team_reviewers": [
            "agent-squad"
          ],
          "repo_name": "deployment_tools",
          "update_jsonnet_attribute_configs": [
            {
              "file_path": "ksonnet/environments/kowalski/dev-us-central-0.kowalski-dev/main.jsonnet",
              "jsonnet_key": "agent_image",
              "jsonnet_value_file": ".image-tag"
            },
            {
              "file_path": "ksonnet/environments/grafana-agent/waves/agent.libsonnet",
              "jsonnet_key": "dev_canary",
              "jsonnet_value_file": ".image-tag"
            },
            {
              "file_path": "ksonnet/environments/agent-smoke-test/dev-us-central-0.agent-smoke-test/main.jsonnet",
              "jsonnet_key": "image_tag",
              "jsonnet_value_file": ".tag-only"
            }
          ]
        }
      github_token:
        from_secret: gh_token

depends_on:
  - Containerize

volumes:
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: pipeline
type: docker
name: Release
platform:
  os: linux
  arch: amd64
trigger:
  ref:
    - refs/tags/v*

steps:
  - name: create-release
    image: rfratto/seego
    volumes:
      - name: docker
        path: /var/run/docker.sock
    environment:
      DOCKER_LOGIN:
        from_secret: DOCKER_LOGIN
      DOCKER_PASSWORD:
        from_secret: DOCKER_PASSWORD
      GITHUB_TOKEN:
        from_secret: GITHUB_KEY
      GPG_PRIVATE_KEY:
        from_secret: gpg_private_key
      GPG_PUBLIC_KEY:
        from_secret: gpg_public_key
      GPG_PASSPHRASE:
        from_secret: gpg_passphrase
    commands:
      - apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
      - curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
      - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian bullseye stable"
      - apt-get update &&  apt-get install -y rubygems rpm nsis docker-ce docker-ce-cli containerd.io gettext
      - docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
      - gem install --no-document fpm
      - rm -r /usr/local/go
      - mkdir -p /usr/local/go/bin
      - wget -q https://golang.org/dl/go1.18.linux-amd64.tar.gz
      - tar -C /usr/local -xzf go1.18.linux-amd64.tar.gz
      - rm go1.18.linux-amd64.tar.gz
      - export PATH=$PATH:/usr/local/go/bin
      - go install github.com/mitchellh/gox@latest
      - go install github.com/tcnksm/ghr@latest
      - export PATH="$(go env GOPATH)/bin:$PATH"
      - make -j4 DOCKER_OPTS="" BUILD_IN_CONTAINER=false RELEASE_BUILD=true RELEASE_TAG=${DRONE_TAG} publish
depends_on:
  - Test

volumes:
  - name: docker
    host:
      path: /var/run/docker.sock

---
kind: secret
name: dockerconfigjson

get:
  path: secret/data/common/gcr
  name: .dockerconfigjson

---
kind: secret
name: gcr_admin

get:
  name: .dockerconfigjson
  path: infra/data/ci/gcr-admin

---
kind: secret
name: gh_token

get:
  path: infra/data/ci/github/grafanabot
  name: pat

---
kind: secret
name: gpg_public_key

get:
  name: public-key
  path: infra/data/ci/packages-publish/gpg

---
kind: secret
name: gpg_private_key

get:
  name: private-key
  path: infra/data/ci/packages-publish/gpg

---
kind: secret
name: gpg_passphrase

get:
  name: passphrase
  path: infra/data/ci/packages-publish/gpg

---
kind: signature
hmac: 802581e2c69988f181ee3cedcdf0e936fc153f4c4587abbb9192292604cda123

...
