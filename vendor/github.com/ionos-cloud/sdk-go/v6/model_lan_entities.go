/*
 * CLOUD API
 *
 * IONOS Enterprise-grade Infrastructure as a Service (IaaS) solutions can be managed through the Cloud API, in addition or as an alternative to the \"Data Center Designer\" (DCD) browser-based tool.    Both methods employ consistent concepts and features, deliver similar power and flexibility, and can be used to perform a multitude of management tasks, including adding servers, volumes, configuring networks, and so on.
 *
 * API version: 6.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ionoscloud

import (
	"encoding/json"
)

// LanEntities struct for LanEntities
type LanEntities struct {
	Nics *LanNics `json:"nics,omitempty"`
}

// NewLanEntities instantiates a new LanEntities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanEntities() *LanEntities {
	this := LanEntities{}

	return &this
}

// NewLanEntitiesWithDefaults instantiates a new LanEntities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanEntitiesWithDefaults() *LanEntities {
	this := LanEntities{}
	return &this
}

// GetNics returns the Nics field value
// If the value is explicit nil, the zero value for LanNics will be returned
func (o *LanEntities) GetNics() *LanNics {
	if o == nil {
		return nil
	}

	return o.Nics

}

// GetNicsOk returns a tuple with the Nics field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LanEntities) GetNicsOk() (*LanNics, bool) {
	if o == nil {
		return nil, false
	}

	return o.Nics, true
}

// SetNics sets field value
func (o *LanEntities) SetNics(v LanNics) {

	o.Nics = &v

}

// HasNics returns a boolean if a field has been set.
func (o *LanEntities) HasNics() bool {
	if o != nil && o.Nics != nil {
		return true
	}

	return false
}

func (o LanEntities) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Nics != nil {
		toSerialize["nics"] = o.Nics
	}
	return json.Marshal(toSerialize)
}

type NullableLanEntities struct {
	value *LanEntities
	isSet bool
}

func (v NullableLanEntities) Get() *LanEntities {
	return v.value
}

func (v *NullableLanEntities) Set(val *LanEntities) {
	v.value = val
	v.isSet = true
}

func (v NullableLanEntities) IsSet() bool {
	return v.isSet
}

func (v *NullableLanEntities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanEntities(val *LanEntities) *NullableLanEntities {
	return &NullableLanEntities{value: val, isSet: true}
}

func (v NullableLanEntities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanEntities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
