version: "3"
services:
  #
  # Core services. These services allow a Grafana Agent to send data somewhere
  # and visualize it in Grafana.
  #
  # Backends: grafana, loki, cortex, tempo
  # Example services: avalanche
  #

  grafana:
    image: grafana/grafana:8.3.3
    entrypoint:
      - /usr/share/grafana/bin/grafana-server
      - --homepath=/usr/share/grafana
      - --config=/etc/grafana-config/grafana.ini
    volumes:
      - ./grafana/config:/etc/grafana-config
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards-provisioning:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"

  loki:
    image: grafana/loki:2.2.1
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"

  cortex:
    image: cortexproject/cortex:v1.8.1
    volumes:
      - ./cortex/config:/etc/cortex-config
    entrypoint:
      - /bin/cortex
      - -config.file=/etc/cortex-config/cortex.yaml
    ports:
      - "9009:9009"

  tempo:
    image: grafana/tempo:1.3.2
    command:
      - "-storage.trace.backend=local"                  # tell tempo where to permanently put traces
      - "-storage.trace.local.path=/tmp/tempo/traces"
      - "-storage.trace.wal.path=/tmp/tempo/wal"        # tell tempo where to store the wal
      - "-auth.enabled=false"                           # disables the requirement for the X-Scope-OrgID header
      - "-server.http-listen-port=3200"
    ports:
      - "3200:3200"

  avalanche:
    image: quay.io/freshtracks.io/avalanche:latest
    command:
      - --metric-count=3000
      - --series-interval=3600
      - --metric-interval=7200
    ports:
      - "9001:9001"

  # tracing load generator
  synthetic-load-generator:
    profiles: [agent] # Should only be run if the Agent is present
    image: omnition/synthetic-load-generator:1.0.25
    volumes:
      - ./load-generator:/etc/load-generator
    environment:
      - TOPOLOGY_FILE=/etc/load-generator/load-generator.json
      - JAEGER_COLLECTOR_URL=http://agent:14268
    depends_on:
      - agent

  #
  # Optional Grafana Agent which can collect telemetry and send it to
  # Loki/Cortex/Tempo.
  #
  # Enable with the "agent" profile.
  #

  agent:
    profiles: [agent]
    image: grafana/agent:latest
    volumes:
      - ./agent/config:/etc/agent-config
    entrypoint:
      - /bin/agent
      - -config.file=/etc/agent-config/agent.yaml
      - -metrics.wal-directory=/tmp/agent/wal
      - -enable-features=integrations-next
      - -config.expand-env
      - -config.enable-read-api
    environment:
      HOSTNAME: agent
      REMOTE_WRITE_HOST: cortex:9009
      LOKI_HOST: loki:3100
      TEMPO_HOST: tempo:4317
      AVALANCHE_HOST: avalanche:9001
      MYSQL_HOST: mysql:3306
      POSTGRES_HOST: postgres:5432
      REDIS_HOST: redis:6379
      DNSMASQ_HOST: dnsmasq:53
      MEMCACHED_HOST: memcached:11211
      CONSUL_HOST: consul:8500
      ELASTICSEARCH_HOST: elasticsearch:9200
      KAFKA_HOST: kafka:9093
      MONGODB_HOST: mongodb:27017
    ports:
      - "12345:12345"
    depends_on:
      - cortex
      - loki
      - tempo

  #
  # Integrations. These services act as sample SUOs that you can test
  # integrations against.
  #
  # They are disabled by default. Enable the "integrations" profile to enable
  # all of them, or pass an integration by name (i.e., mysql) to enable a
  # specific one.
  #

  mysql:
    profiles: [integrations,mysql]
    image: mysql/mysql-server:5.7
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
      - MYSQL_ROOT_HOST=%
    ports:
      - 127.0.0.1:3306:3306

  postgres:
    profiles: [integrations,postgres]
    image: postgres:13.0
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - 5432:5432

  redis:
    profiles: [integrations,redis]
    image: redis:6
    ports:
      - "6379:6379"

  dnsmasq:
    profiles: [integrations,dnsmasq]
    image: andyshinn/dnsmasq:2.81
    cap_add: [NET_ADMIN]
    volumes:
      - /tmp/dnsmasq-leases:/var/lib/misc
    ports:
      - "30053:53/udp"

  memcached:
    profiles: [integrations,memcached]
    image: memcached
    ports:
      - "11211:11211"

  consul:
    profiles: [integrations,consul]
    image: consul
    ports:
      - "8500:8500"

  elasticsearch:
    profiles: [integrations,elasticsearch]
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    environment:
      - node.name=elasticsearch
      - cluster.name=es-grafana-agent-cluster
      - discovery.type=single-node
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"

  zookeeper:
    profiles: [integrations,zookeeper]
    image: wurstmeister/zookeeper:3.4.6
    expose:
      - "2181"
    restart: always

  kafka:
    profiles: [integrations,kafka]
    image: wurstmeister/kafka:2.12-2.3.0
    depends_on:
      - zookeeper
    ports:
      - "127.0.0.1:9093:9093"
    expose:
      - "9092"
      - "9094"
    environment:
      KAFKA_CREATE_TOPICS: "sarama_topic:2:1"
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://127.0.0.1:9093,DOCKER://kafka:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://kafka:9092,OUTSIDE://:9093,DOCKER://kafka:9094
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    restart: always

  kafka-producer:
    profiles: [integrations,kafka]
    image: gaantunes/kafka-client:latest
    depends_on:
      - kafka
    command:
      --producer --kafka.server kafka:9094
    restart: always

  kafka-consumer:
    profiles: [integrations,kafka]
    image: gaantunes/kafka-client:latest
    depends_on:
      - kafka
    command:
      --consumer --kafka.server kafka:9094
    restart: always

  mongodb:
    profiles: [integrations,mongodb]
    image: mongo:4.2
    ports:
      - "127.0.0.1:27017:27017"

volumes:
  elasticsearch_data:
    driver: local
