# The docker-compose.integrations.yaml file provides:
#
# - backend services
# - integration scrape targets
#
# that enable local testing of all components of the Agent.
#
# The agent/config/agent-local.yaml file holds a config to
# scrape all of these services.
version: "2"
services:

  #
  # Frontend
  #

  grafana:
    image: grafana/grafana:7.5.4
    entrypoint:
      - /usr/share/grafana/bin/grafana-server
      - --homepath=/usr/share/grafana
      - --config=/etc/grafana-config/grafana.ini
    volumes:
      - ./grafana/config:/etc/grafana-config
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/dashboards-provisioning:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"

  #
  # Backend for remote_write components
  #

  cortex:
    image: cortexproject/cortex:v1.8.1
    volumes:
      - /tmp/cortex:/tmp/cortex
      - ./cortex/config:/etc/cortex-config
    entrypoint:
      - /bin/cortex
      - -config.file=/etc/cortex-config/cortex.yaml
    ports:
      - "9009:9009"

  loki:
    image: grafana/loki:1.5.0
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml

  tracing:
    image: otel/opentelemetry-collector:0.9.0
    volumes:
      - ./otel-collector:/etc/otel-collector
    command:
      - --config=/etc/otel-collector/config.yaml

  #
  # Integrations
  #

  mysql:
    image: mysql/mysql-server:5.7
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
      - MYSQL_ROOT_HOST=%
    ports:
      - 127.0.0.1:3306:3306

  postgres:
    image: postgres:13.0
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    ports:
      - 5432:5432

  redis:
    image: redis:6
    ports:
      - "6379:6379"

  dnsmasq:
    image: andyshinn/dnsmasq:2.81
    cap_add: [NET_ADMIN]
    volumes:
      - /tmp/dnsmasq-leases:/var/lib/misc
    ports:
      - "30053:53/udp"

  memcached:
    image: memcached
    ports:
      - "11211:11211"

  consul:
    image: consul
    ports:
      - "8500:8500"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.1
    environment:
      - node.name=elasticsearch
      - cluster.name=es-grafana-agent-cluster
      - discovery.type=single-node
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    expose:
      - "2181"
    restart: always
    container_name: zookeeper

  kafka:
    image: wurstmeister/kafka:2.12-2.3.0
    depends_on:
      - zookeeper
    ports:
      - "127.0.0.1:9093:9093"
    expose:
      - "9092"
      - "9094"
    environment:
      KAFKA_CREATE_TOPICS: "sarama_topic:2:1"
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://127.0.0.1:9093,DOCKER://kafka:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://kafka:9092,OUTSIDE://:9093,DOCKER://kafka:9094
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    restart: always
    container_name: kafka

  kafka-producer:
    image: gaantunes/kafka-client:latest
    depends_on: 
      - kafka
    command:
      --producer --kafka.server kafka:9094
    restart: always
    container_name: kafka-producer

  kafka-consumer:
    image: gaantunes/kafka-client:latest
    depends_on: 
      - kafka
    command:
      --consumer --kafka.server kafka:9094
    restart: always
    container_name: kafka-consumer

  mongodb:
    container_name: "mongodb"
    image: mongo:4.2
    ports:
      - "127.0.0.1:27017:27017" 

volumes:
  elasticsearch_data:
    driver: local
