apiVersion: monitoring.grafana.com/v1alpha1
kind: GrafanaAgent
metadata:
  name: grafana-agent-example
  namespace: default
  labels:
    app: grafana-agent-example
spec:
  image: grafana/agent:main
  logLevel: info
  serviceAccountName: grafana-agent
  storage:
    volumeClaimTemplate:
      spec:
        resources:
          requests:
            storage: 1Gi
  logs:
    instanceSelector:
      matchLabels:
        agent: grafana-agent-example
  metrics:
    instanceSelector:
      matchLabels:
        agent: grafana-agent-example
  integrations:
    selector:
      matchLabels:
        agent: grafana-agent-example

---

apiVersion: monitoring.grafana.com/v1alpha1
kind: MetricsInstance
metadata:
  name: primary
  namespace: default
  labels:
    agent: grafana-agent-example
spec:
  remoteWrite:
  - url: http://prometheus:9090/api/v1/write
  podMonitorNamespaceSelector: {}
  podMonitorSelector:
    matchLabels:
      instance: primary

---

apiVersion: monitoring.grafana.com/v1alpha1
kind: LogsInstance
metadata:
  name: primary
  namespace: default
  labels:
    agent: grafana-agent-example
spec:
  clients:
  - url: http://loki:8080/loki/api/v1/push

  # Supply an empty namespace selector to look in all namespaces.
  podLogsNamespaceSelector: {}
  podLogsSelector:
    matchLabels:
      instance: primary

---

# Have the Agent monitor itself.
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: grafana-agents
  namespace: default
  labels:
    instance: primary
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-agent
  podMetricsEndpoints:
    - port: http-metrics

---

# Have the Agent get logs from itself.
apiVersion: monitoring.grafana.com/v1alpha1
kind: PodLogs
metadata:
  name: grafana-agents
  namespace: default
  labels:
    instance: primary
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-agent
  pipelineStages:
    - cri: {}

---

# Collect node_exporter metrics.
apiVersion: monitoring.grafana.com/v1alpha1
kind: Integration
metadata:
  name: node-exporter
  namespace: default
  labels:
    agent: grafana-agent-example
spec:
  name: node_exporter
  type:
    allNodes: true
    unique: true
  config:
    autoscrape:
      enable: true
      metrics_instance: default/primary
    rootfs_path: /default/node_exporter/rootfs
    sysfs_path: /default/node_exporter/sys
    procfs_path: /default/node_exporter/proc
  volumeMounts:
    - mountPath: /default/node_exporter/proc
      name: proc
    - mountPath: /default/node_exporter/sys
      name: sys
    - mountPath: /default/node_exporter/rootfs
      name: root
  volumes:
    - name: proc
      hostPath:
        path: /proc
    - name: sys
      hostPath:
        path: /sys
    - name: root
      hostPath:
        path: /root
  # These aren't really used here, but just being mounted for local testing.
  secrets:
  - name: fake-secret
    key: key
  configMaps:
  - name: fake-configmap
    key: foo

---

# Collect kubernetes API events.
apiVersion: monitoring.grafana.com/v1alpha1
kind: Integration
metadata:
  name: eventhandler
  namespace: default
  labels:
    agent: grafana-agent-example
spec:
  name: eventhandler
  type:
    unique: true
  config:
    logs_instance: default/primary
    cache_path: "/var/lib/grafana-agent/data/eventhandler.cache"

---

#
# Pretend Secrets/ConfigMaps
#

---
apiVersion: v1
kind: Secret
metadata:
  name: fake-secret
  namespace: default
stringData:
  key: "value"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fake-configmap
  namespace: default
data:
  foo: "bar"

#
# Extra resources
#

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-agent
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: grafana-agent
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/proxy
  - nodes/metrics
  - services
  - endpoints
  - pods
  - events # needed for eventhandler integration
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  - /metrics/cadvisor
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: grafana-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: grafana-agent
subjects:
- kind: ServiceAccount
  name: grafana-agent
  namespace: default
