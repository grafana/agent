apiVersion: monitoring.grafana.com/v1alpha1
kind: GrafanaAgent
metadata:
  name: grafana-agent-example
  namespace: default
  labels:
    app: grafana-agent-example
spec:
  image: grafana/agent:latest
  serviceAccountName: grafana-agent
  logs:
    instanceSelector:
      matchLabels:
        agent: grafana-agent-example
  metrics:
    instanceSelector:
      matchLabels:
        agent: grafana-agent-example
  integrations:
    selector:
      matchLabels:
        agent: grafana-agent-example

---

apiVersion: monitoring.grafana.com/v1alpha1
kind: MetricsInstance
metadata:
  name: primary
  namespace: default
  labels:
    agent: grafana-agent-example
spec:
  remoteWrite:
  - url: http://prometheus:9090/api/v1/write
    basicAuth:
      username:
        name: prometheus-fake-credentials
        key: fakeUsername
      password:
        name: prometheus-fake-credentials
        key: fakePassword
  # Supply an empty namespace selector to look in all namespaces.
  podMonitorNamespaceSelector: {}
  podMonitorSelector:
    matchLabels:
      instance: primary
  # Supply an empty namespace selector to look in all namespaces.
  serviceMonitorNamespaceSelector: {}
  serviceMonitorSelector:
    matchLabels:
      instance: primary

---

apiVersion: monitoring.grafana.com/v1alpha1
kind: LogsInstance
metadata:
  name: primary
  namespace: default
  labels:
    agent: grafana-agent-example
spec:
  clients:
  - url: http://loki:8080/loki/api/v1/push

  # Supply an empty namespace selector to look in all namespaces.
  podLogsNamespaceSelector: {}
  podLogsSelector:
    matchLabels:
      instance: primary

---

apiVersion: monitoring.grafana.com/v1alpha1
kind: Integration
metadata:
  name: node-exporter
  namespace: default
  labels:
    agent: grafana-agent-example
spec:
  name: node_exporter
  type:
    allNodes: true
    unique: true
  config:
    rootfs_path: /rootfs
    sysfs_path: /host/sys
    procfs_path: /host/proc
  volumeMounts:
  - mountPath: /host/proc
    name: proc
  - mountPath: /host/sys
    name: sys
  - mountPath: /rootfs
    name: root
  volumes:
  - hostPath:
    path: /proc
    name: proc
  - hostPath:
    path: /sys
    name: sys
  - hostPath:
    path: /
    name: root

---

# Have the Agent monitor itself.
apiVersion: monitoring.coreos.com/v1
kind: PodMonitor
metadata:
  name: grafana-agents
  namespace: default
  labels:
    instance: primary
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-agent
  podMetricsEndpoints:
    - port: http-metrics

---

# Have the Agent get logs from itself.
apiVersion: monitoring.grafana.com/v1alpha1
kind: PodLogs
metadata:
  name: grafana-agents
  namespace: default
  labels:
    instance: primary
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana-agent
  pipelineStages:
    - cri: {}

#
# Pretend credentials
#

---
apiVersion: v1
kind: Secret
metadata:
  name: prometheus-fake-credentials
  namespace: default
data:
  # "user"
  fakeUsername: "dXNlcg=="
  # "password"
  fakePassword: "cGFzc3dvcmQ="

#
# Extra resources
#

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-agent
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: grafana-agent
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/proxy
  - nodes/metrics
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  - /metrics/cadvisor
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: grafana-agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: grafana-agent
subjects:
- kind: ServiceAccount
  name: grafana-agent
  namespace: default
