prometheus.remote_write "metrics_remote_write_name" {
	endpoint {
		name = "remote_write_name-149bbd"
		url  = "http://localhost:9009/api/prom/push"

		queue_config { }

		metadata_config { }
	}
}

otelcol.extension.jaeger_remote_sampling "default_0" {
	grpc { }

	http { }

	source {
		remote {
			endpoint          = "jaeger-collector:14250"
			compression       = ""
			write_buffer_size = "0B"
		}
		reload_interval = "30s"
	}
}

otelcol.receiver.otlp "_0_default" {
	grpc {
		include_metadata = true
	}

	http {
		include_metadata = true
	}

	output {
		metrics = []
		logs    = []
		traces  = [otelcol.processor.discovery._0_default.input]
	}
}

discovery.azure "_0_default_prometheus1" {
	subscription_id = "subscription1"

	oauth {
		client_id     = "client1"
		tenant_id     = "tenant1"
		client_secret = "secret1"
	}

	managed_identity {
		client_id = "client1"
	}
}

discovery.lightsail "_0_default_prometheus1" {
	region     = "us-east-1"
	access_key = "YOUR_ACCESS_KEY"
	secret_key = "YOUR_SECRET_KEY"
	port       = 8080
}

discovery.relabel "_0_default_prometheus1" {
	targets = concat(
		discovery.azure._0_default_prometheus1.targets,
		discovery.lightsail._0_default_prometheus1.targets,
	)

	rule {
		source_labels = ["__address1__"]
		target_label  = "__param_target1"
	}

	rule {
		source_labels = ["__address2__"]
		target_label  = "__param_target2"
	}
}

otelcol.processor.discovery "_0_default" {
	targets          = discovery.relabel._0_default_prometheus1.output
	operation_type   = "insert"
	pod_associations = ["ip", "net.host.ip"]

	output {
		metrics = []
		logs    = []
		traces  = [otelcol.processor.attributes._0_default.input]
	}
}

otelcol.processor.attributes "_0_default" {
	action {
		key    = "db.table"
		action = "delete"
	}

	output {
		metrics = []
		logs    = []
		traces  = [otelcol.exporter.loadbalancing._0_default.input, otelcol.exporter.logging._0_default.input, otelcol.connector.spanmetrics._0_default.input]
	}
}

prometheus.relabel "_0_default" {
	forward_to = [prometheus.remote_write.metrics_remote_write_name.receiver]

	rule {
		target_label = "fizz"
		replacement  = "buzz"
	}

	rule {
		target_label = "foo"
		replacement  = "bar"
	}
}

otelcol.exporter.prometheus "_0_default" {
	gc_frequency = "0s"
	forward_to   = [prometheus.relabel._0_default.receiver]
}

otelcol.exporter.loadbalancing "_0_default" {
	protocol {
		otlp {
			retry {
				max_elapsed_time = "1m0s"
			}

			client {
				compression = "none"
			}
		}
	}

	resolver {
		static {
			hostnames = ["tempo1.example.com", "tempo2.example.com"]
		}
	}
}

otelcol.exporter.logging "_0_default" { }

otelcol.connector.spanmetrics "_0_default" {
	histogram {
		explicit { }
	}
	namespace = "metrics_prefix"

	output {
		metrics = [otelcol.exporter.prometheus._0_default.input]
	}
}

otelcol.receiver.otlp "_1_lb" {
	grpc {
		endpoint = "0.0.0.0:4318"
	}

	output {
		metrics = []
		logs    = []
		traces  = [otelcol.processor.tail_sampling._1_default.input]
	}
}

otelcol.processor.tail_sampling "_1_default" {
	policy {
		name = "test-policy-1"
		type = "always_sample"
	}
	decision_wait = "5s"

	output {
		traces = [otelcol.processor.batch._1_default.input]
	}
}

otelcol.processor.batch "_1_default" {
	timeout             = "5s"
	send_batch_size     = 2048
	send_batch_max_size = 4096

	output {
		metrics = []
		logs    = []
		traces  = [otelcol.exporter.otlp._1_0.input, otelcol.exporter.logging._1_default.input, otelcol.connector.spanmetrics._1_default.input]
	}
}

prometheus.relabel "_1_default" {
	forward_to = [prometheus.remote_write.metrics_remote_write_name.receiver]

	rule {
		target_label = "fizz"
		replacement  = "buzz"
	}

	rule {
		target_label = "foo"
		replacement  = "bar"
	}
}

otelcol.exporter.prometheus "_1_default" {
	gc_frequency = "0s"
	forward_to   = [prometheus.relabel._1_default.receiver]
}

otelcol.exporter.otlp "_1_0" {
	retry_on_failure {
		max_elapsed_time = "1m0s"
	}

	client {
		endpoint = "tempo.example.com:14250"

		tls {
			insecure = true
		}
	}
}

otelcol.exporter.logging "_1_default" { }

otelcol.connector.spanmetrics "_1_default" {
	histogram {
		explicit { }
	}
	namespace = "metrics_prefix"

	output {
		metrics = [otelcol.exporter.prometheus._1_default.input]
	}
}
