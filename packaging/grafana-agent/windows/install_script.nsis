Unicode true
# This installs two files, grafana-agent-windows-amd64.exe and logo.ico, creates a start menu shortcut, builds an uninstaller, and
# adds uninstall information to the registry for Add/Remove Programs

!define APPNAME "Grafana Agent"
# These will be displayed by the "Click here for support information" link in "Add/Remove Programs"
!define HELPURL "https://github.com/grafana/agent/discussions" # "Support Information" link
!define UPDATEURL "https://github.com/grafana/agent/releases" # "Product Updates" link
!define ABOUTURL "https://github.com/grafana/agent" # "Publisher" link

RequestExecutionLevel admin #Require admin rights on NT6+ (When UAC is turned on)

InstallDir "$PROGRAMFILES64\${APPNAME}"

# This will be in the installer/uninstaller's title bar
Name "${APPNAME} ${VERSION}"
Icon "logo.ico"
outFile "${OUT}"


!include nsDialogs.nsh
!include FileFunc.nsh

LicenseData LICENSE

# Everything must be global Vars
Var EnableExporterCheck
Var EnableExporterValue
Var EnableExporterDialog
Var PassedInParameters
Var Url
Var Username
Var Password

Page license
Page directory
Page custom enableWindowsExporter enableWindowsExporterLeave
Page instfiles

# Annoyingly macros need to be defined before use
!macro VerifyUserIsAdmin
UserInfo::GetAccountType
pop $0
${If} $0 != "admin" #Require admin rights on NT4+
        messageBox mb_iconstop "Administrator rights required!"
        setErrorLevel 740 #ERROR_ELEVATION_REQUIRED
        quit
${EndIf}
!macroend

Function .onInit
    setShellVarContext all
    !insertmacro VerifyUserIsAdmin
FunctionEnd

Section "install"
    IfSilent ThisIsSilent RunInstaller
    ThisIsSilent:
        ${GetParameters} $PassedInParameters
        ${GetOptions} $PassedInParameters "/EnableExporter" $EnableExporterValue
        ${GetOptions} $PassedInParameters "/Url" $Url
        ${GetOptions} $PassedInParameters "/Username" $Username
        ${GetOptions} $PassedInParameters "/Password" $Password
        Call Install
        Return
    RunInstaller:
        Call Install
SectionEnd

Function enableWindowsExporter
    nsDialogs::Create 1018
    Pop $EnableExporterDialog

    ${If} $EnableExporterDialog == error
        Abort
    ${EndIf}

    ${NSD_CreateLabel} 0 0 100% 12u "Enable Windows Exporter"
    Pop $0

    ${NSD_CreateCheckBox} 0 13u 100% 12u ""
    Pop $EnableExporterCheck

    nsDialogs::Show
FunctionEnd

Function enableWindowsExporterLeave
    ${NSD_GetState} $EnableExporterCheck $EnableExporterValue
    ${If} $EnableExporterValue == ${BST_CHECKED}
        StrCpy $EnableExporterValue "true"
    ${Else}
        StrCpy $EnableExporterValue "false"
    ${EndIf}
FunctionEnd

Function Install
    # Preemptively stop Grafana Agent if it is running
    nsExec::ExecToLog 'sc stop "Grafana Agent"'
    Pop $0
    # Files for the install directory - to build the installer, these should be in the same directory as the install script (this file)
    setOutPath $INSTDIR
    # Files added here should be removed by the uninstaller (see section "uninstall")
    file "grafana-agent-windows-amd64.exe"
    file "logo.ico"
    # Add any other files for the install directory (license files, app data, etc) here

    # Uninstaller - See function un.onInit and section "uninstall" for configuration
    writeUninstaller "$INSTDIR\uninstall.exe"

    # Registry information for add/remove programs
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "DisplayName" "${APPNAME} ${VERSION}"
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "UninstallString" "$\"$INSTDIR\uninstall.exe$\""
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "QuietUninstallString" "$\"$INSTDIR\uninstall.exe$\" /S"
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "InstallLocation" "$\"$INSTDIR$\""
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "DisplayIcon" "$\"$INSTDIR\logo.ico$\""
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "Publisher" "$\"https://github.com/grafana/agent$\""
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "HelpLink" "$\"${HELPURL}$\""
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "URLUpdateInfo" "$\"${UPDATEURL}$\""
    WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "URLInfoAbout" "$\"${ABOUTURL}$\""
    # There is no option for modifying or repairing the install
    WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "NoModify" 1
    WriteRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "NoRepair" 1
    Call WriteConfig


    # Create our batch file, since services cant run with parameters, nsexec is used to suppress console output, instead goes
    # to NSIS log window
    nsExec::ExecToLog 'sc create "Grafana Agent" binpath= "\"$INSTDIR\grafana-agent-windows-amd64.exe\""'
    Pop $0
    # These separate create and config commands are needed, on the config the binpath is required
    nsExec::ExecToLog 'sc config "Grafana Agent" start= auto binpath= "\"$INSTDIR\grafana-agent-windows-amd64.exe\" -config.file=\"$INSTDIR\agent-config.yaml\""'
    Pop $0
    nsExec::ExecToLog `sc start "Grafana Agent"`
    Pop $0
FunctionEnd

Function WriteConfig
    # If the file exists we dont want to overwrite it since they may have custom code there
    IfFileExists "$INSTDIR\agent-config.yaml" ReturnEarly WriteFile
    ReturnEarly:
        Return
    WriteFile:
        # Write the config file, its easier to do this way than replacing an values in a templated file
        FileOpen $9 "$INSTDIR\agent-config.yaml" w #Opens a Empty File and fills it
        FileWrite $9 `server:$\n`
        FileWrite $9 `  log_level: warn$\n`
        FileWrite $9 `metrics:$\n`
        FileWrite $9 `  wal_directory: $APPDATA\grafana-agent-wal$\n`
        FileWrite $9 `  global:$\n`
        FileWrite $9 `    scrape_interval: 1m$\n`
        ${If} $Url != ""
        FileWrite $9 `    remote_write: $\n`
        FileWrite $9 `    - url: $Url $\n`
        FileWrite $9 `      basic_auth: $\n`
        FileWrite $9 `        username: $Username $\n`
        FileWrite $9 `        password: $Password $\n`
        ${EndIf}
        FileWrite $9 `  configs:$\n`
        FileWrite $9 `    - name: integrations$\n`
        ${If} $EnableExporterValue == "true"
        FileWrite $9 `integrations:$\n`
        FileWrite $9 `  windows_exporter:$\n`
        FileWrite $9 `    enabled: true`
        ${EndIf}
        FileClose $9 # and close the file
        Return
FunctionEnd

# Uninstaller
Function un.onInit
    SetShellVarContext all
    IfSilent ThisIsSilent WarnUser
    ThisIsSilent:
        Return
    WarnUser:
         #Verify the uninstaller - last chance to back out
        MessageBox MB_OKCANCEL "Permanently remove ${APPNAME}? This will remove the WAL and the agent config." IDOK next
            Abort
        next:
        !insertmacro VerifyUserIsAdmin
FunctionEnd

Section "uninstall"
    DetailPrint "Starting Uninstaller"
    # Remove Start Menu launcher
    delete "$SMPROGRAMS\${APPNAME}\${APPNAME}.lnk"
    # Try to remove the Start Menu folder - this will only happen if it is empty
    RMDir "$SMPROGRAMS\${APPNAME}"
    # This is cleanup on the service and removing the exporter.
    nsExec::ExecToLog `sc stop "Grafana Agent"`
    Pop $0
    nsExec::ExecToLog `sc delete "Grafana Agent" confirm`
    Pop $0

    # Remove files
    delete $INSTDIR\agent-windows-amd64.exe         # Old binary name, left in for upgrades
    delete $INSTDIR\grafana-agent-windows-amd64.exe # New binary name
    delete $INSTDIR\logo.ico
    delete $INSTDIR\agent-config.yaml

    # Always delete uninstaller as the last action
    delete $INSTDIR\uninstall.exe

    # Try to remove the install directory - this will only happen if it is empty
    RMDir $INSTDIR

    RMDir /r $APPDATA\grafana-agent-wal

    # Remove uninstaller information from the registry
    DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}"
SectionEnd
