#!/usr/bin/env bash
#
# This script builds and pushes windows Docker containers. Maintainers
# should *not* run this locally since it pushes the containers.
#
# This script expects to be run from the repo root and has checks for running
# from a Drone trigger.

set -euxo pipefail

# Environment variables used throughout this script. These must be set
# otherwise bash will fail with an "unbound variable" error because of the `set
# -u` flag on the above line.
#
# If the environment variables are unset, the variables below default to an
# empty string.
export DRONE_TAG=${DRONE_TAG:-}
export DRONE_BRANCH=${DRONE_BRANCH:-}
export DOCKER_LOGIN=${DOCKER_LOGIN:-}
export DOCKER_PASSWORD=${DOCKER_PASSWORD:-}

export AGENT_IMAGE=grafana/agent
export AGENTCTL_IMAGE=grafana/agentctl

if [ -n "$DRONE_TAG" ]; then
  VERSION=$DRONE_TAG
else
  VERSION=$(./tools/image-tag)
fi

TAG1=$VERSION
TAG2=$TAG1

# We also need to know which "branch tag" to update. Branch tags are used as a
# secondary tag for Docker containers. The branch tag is "latest" when being
# tagged from a stable release (i.e., not a release candidate) or the Drone
# branch when coming from a Drone job.
#
# If we're not running from drone, we'll set the branch tag to match the
# version. This effectively acts as a no-op because it will tag the same Docker
# image twice.
if [ -n "$DRONE_TAG" ] && [[ "$DRONE_TAG" != *"-rc."* ]]; then
  TAG2=latest
elif [ -n "$DRONE_BRANCH" ]; then
  TAG2=$DRONE_BRANCH
fi

# Build all of our images
docker build \
  -t "$AGENT_IMAGE:$TAG1" \
  -t "$AGENT_IMAGE:$TAG2" \
  --build-arg VERSION=$VERSION \
  -f ./cmd/grafana-agent/Dockerfile.windows \
  .

docker build \
  -t "$AGENTCTL_IMAGE:$TAG1" \
  -t "$AGENTCTL_IMAGE:$TAG2" \
  --build-arg VERSION=$VERSION \
  -f ./cmd/grafana-agentctl/Dockerfile.windows \
  .

# Push images only if we have docker credentials and a drone tag is set
if [ -n "$DOCKER_LOGIN" ] && [ -n "$DOCKER_PASSWORD" ] && [ -n "$DRONE_TAG" ]; then
  docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
  docker push "$AGENT_IMAGE:$TAG1"
  docker push "$AGENTCTL_IMAGE:$TAG1"

  # If TAG2 never got set to something unique, no need to push it
  if [[ "$TAG1" != "$TAG2" ]]; then
    docker push "$AGENT_IMAGE:$TAG2"
    docker push "$AGENTCTL_IMAGE:$TAG2"
  fi
fi
