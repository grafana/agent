# Resources to assert to exist when reconciling test-metrics-instance.in.yaml.

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: grafana-agent-example
  namespace: default
  labels:
    operator.agent.grafana.com/name: grafana-agent-example
    operator.agent.grafana.com/shard: "0"
    operator.agent.grafana.com/type: metrics
    app.kubernetes.io/instance: grafana-agent-example
    app.kubernetes.io/managed-by: grafana-agent-operator
    app.kubernetes.io/name: grafana-agent
    grafana-agent: grafana-agent-example
  ownerReferences:
  - apiVersion: monitoring.grafana.com/v1alpha1
    blockOwnerDeletion: true
    controller: true
    kind: GrafanaAgent
    name: grafana-agent-example
spec:
  replicas: 1
  serviceName: grafana-agent-example-operated
  template:
    spec:
      containers:
      - name: config-reloader
        args:
        - --config-file=/var/lib/grafana-agent/config-in/agent.yml
        - --config-envsubst-file=/var/lib/grafana-agent/config/agent.yml
        - --watch-interval=1m
        - --statefulset-ordinal-from-envvar=POD_NAME
        - --reload-url=http://127.0.0.1:8080/-/reload
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: SHARD
          value: "0"
        - name: SHARDS
          value: "1"
        volumeMounts:
        - mountPath: /var/lib/grafana-agent/config-in
          name: config
          readOnly: true
        - mountPath: /var/lib/grafana-agent/config
          name: config-out
        - mountPath: /var/lib/grafana-agent/secrets
          name: secrets
          readOnly: true
        - mountPath: /var/lib/grafana-agent/data
          name: grafana-agent-example-wal
      - name: grafana-agent
        args:
        - -config.file=/var/lib/grafana-agent/config/agent.yml
        - -config.expand-env=true
        - -server.http.address=0.0.0.0:8080
        - -enable-features=integrations-next
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: SHARD
          value: "0"
        - name: SHARDS
          value: "1"
        ports:
        - containerPort: 8080
          name: http-metrics
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /-/ready
            port: http-metrics
            scheme: HTTP
        volumeMounts:
        - mountPath: /var/lib/grafana-agent/config-in
          name: config
          readOnly: true
        - mountPath: /var/lib/grafana-agent/config
          name: config-out
        - mountPath: /var/lib/grafana-agent/secrets
          name: secrets
          readOnly: true
        - mountPath: /var/lib/grafana-agent/data
          name: grafana-agent-example-wal
      serviceAccount: grafana-agent
      serviceAccountName: grafana-agent
      terminationGracePeriodSeconds: 4800
      volumes:
      - name: config
        secret:
          secretName: grafana-agent-example-config
      - name: config-out
        emptyDir: {}
      - name: secrets
        secret:
          secretName: grafana-agent-example-secrets
  volumeClaimTemplates:
  - metadata:
      name: grafana-agent-example-wal
    spec:
      accessModes: [ReadWriteOnce]
      resources:
        requests:
          storage: 1Gi

---

apiVersion: v1
kind: Secret
metadata:
  name: grafana-agent-example-config
  namespace: default
  labels:
    app.kubernetes.io/managed-by: grafana-agent-operator
  ownerReferences:
  - apiVersion: monitoring.grafana.com/v1alpha1
    kind: GrafanaAgent
    name: grafana-agent-example
# We don't test the contents of the secret here; we use unit-level tests for
# asserting that the generated config is correct.

---

apiVersion: v1
kind: Service
metadata:
  name: grafana-agent-example-operated
  namespace: default
  labels:
    app.kubernetes.io/managed-by: grafana-agent-operator
    operated-agent: "true"
    operator.agent.grafana.com/name: grafana-agent-example
  ownerReferences:
  - apiVersion: monitoring.grafana.com/v1alpha1
    kind: GrafanaAgent
    name: grafana-agent-example
spec:
  type: ClusterIP
  ports:
  - name: http-metrics
    port: 8080
    protocol: TCP
    targetPort: http-metrics
  selector:
    app.kubernetes.io/name: grafana-agent
    operator.agent.grafana.com/name: grafana-agent-example
