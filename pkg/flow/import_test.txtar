-- declare_passthrough --

declare "a" {
	argument "input" {}

	testcomponents.passthrough "pt" {
		input = argument.input.value
		lag = "1ms"
	}

	export "output" {
		value = testcomponents.passthrough.pt.output
	}
}

-- declare_negative_passthrough --

declare "a" {
	argument "input" {}

	export "output" {
		value = -argument.input.value
	}
}

-- declare_instantiates_declare_passthrough --

declare "b" {
	argument "input" {}

	a "cc" {
		input = argument.input.value
	}

	export "output" {
		value = a.cc.output
	}
}

-- declare_passthrough_import_a --

import.file "testImport" {
	filename = "nested_module"
}

declare "a" {
	argument "input" {}

	testImport.a "cc" {
		input = argument.input.value
	}

	export "output" {
		value = testImport.a.cc.output
	}
}

-- declare_passthrough_import_a_used_in_declare_b --

import.file "testImport" {
	filename = "nested_module"
}
declare "a" {
	argument "input" {}

	declare "b" {
		argument "input" {}

		testImport.a "cc" {
			input = argument.input.value
		}

		export "output" {
			value = testImport.a.cc.output
		}
	}

	b "cc" {
		input = argument.input.value
	}

	export "output" {
		value = b.cc.output
	}
}

-- root_import_a --

testcomponents.count "inc" {
	frequency = "10ms"
	max = 10
}

import.file "testImport" {
	filename = "module"
}

testImport.a "cc" {
	input = testcomponents.count.inc.count
}

testcomponents.summation "sum" {
	input = testImport.a.cc.output
}

-- root_import_a_negative_input --

import.file "testImport" {
	filename = "module"
}

testImport.a "cc" {
	input = -10
}

testcomponents.summation "sum" {
	input = testImport.a.cc.output
}

-- root_import_b --

testcomponents.count "inc" {
	frequency = "10ms"
	max = 10
}

import.file "testImport" {
	filename = "module"
}

testImport.b "cc" {
	input = testcomponents.count.inc.count
}

testcomponents.summation "sum" {
	input = testImport.b.cc.output
}

-- root_import_a_in_declare_b --

declare "b" {
	testcomponents.count "inc" {
		frequency = "10ms"
		max = 10
	}

	import.file "testImport" {
		filename = "module"
	}

	testImport.a "cc" {
		input = testcomponents.count.inc.count
	}

	export "output" {
		value = testImport.a.cc.output
	}
}

b "cc" {}

testcomponents.summation "sum" {
	input = b.cc.output
}

-- root_import_a_used_in_declare_b --

import.file "testImport" {
	filename = "module"
}

declare "b" {
	testcomponents.count "inc" {
		frequency = "10ms"
		max = 10
	}

	testImport.a "cc" {
		input = testcomponents.count.inc.count
	}

	export "output" {
		value = testImport.a.cc.output
	}
}

b "cc" {}

testcomponents.summation "sum" {
	input = b.cc.output
}

-- root_import_a_used_in_declare_c_within_declare_b --

import.file "testImport" {
	filename = "module"
}

declare "b" {
	declare "c" {
		testcomponents.count "inc" {
			frequency = "10ms"
			max = 10
		}

		testImport.a "cc" {
			input = testcomponents.count.inc.count
		}

		export "output" {
			value = testImport.a.cc.output
		}
	}
	c "cc" {}

	export "output" {
		value = c.cc.output
	}
}

b "cc" {}

testcomponents.summation "sum" {
	input = b.cc.output
}

-- declare_passthrough_import_a_(other_nested_module) --

import.file "testImport" {
	filename = "other_nested_module"
}

declare "a" {
	argument "input" {}

	testImport.a "cc" {
		input = argument.input.value
	}

	export "output" {
		value = testImport.a.cc.output
	}
}

-- import_string_declare_passthrough --

testcomponents.count "inc" {
	frequency = "10ms"
	max = 10
}

import.string "testImport" {
	content = `
		declare "test" {
			argument "input" {}

			testcomponents.passthrough "pt" {
				input = argument.input.value
				lag = "1ms"
			}

			export "testOutput" {
				value = testcomponents.passthrough.pt.output
			}
		}
	`
}

testImport.test "myModule" {
	input = testcomponents.count.inc.count
}

testcomponents.summation "sum" {
	input = testImport.test.myModule.testOutput
}

-- import_use_out_of_scope_declare --

declare "cantAccessThis" {
	export "output" {
		value = -1
	}
}

import.string "testImport" {
	content = ` declare "a" {
		cantAccessThis "default" {}
	}`
}

testImport.a "cc" {}

-- root_use_out_of_scope_declare --

import.string "testImport" {
	content = `import.string "nestedImport" {
		content = 'declare "cantAccessThis" {}'
	}`
}

testImport.cantAccessThis "cc" {}
