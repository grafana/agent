Import passthrough module and instantiate it in a declare. The imported module has a nested declare that uses an imported passthrough.

-- main.river --
declare "b" {
	testcomponents.count "inc" {
		frequency = "10ms"
		max = 10
	}

	import.file "testImport" {
		filename = "module.river"
	}

	testImport.a "cc" {
		input = testcomponents.count.inc.count
	}

	export "output" {
		value = testImport.a.cc.output
	}
}

b "cc" {}

testcomponents.summation "sum" {
	input = b.cc.output
}

-- module.river --
import.file "testImport" {
	filename = "nested_module.river"
}
declare "a" {
	argument "input" {}

	declare "b" {
		argument "input" {}

		testImport.a "cc" {
			input = argument.input.value
		}

		export "output" {
			value = testImport.a.cc.output
		}
	}

	b "cc" {
		input = argument.input.value
	}

	export "output" {
		value = b.cc.output
	}
}

-- nested_module.river --
declare "a" {
	argument "input" {}

	testcomponents.passthrough "pt" {
		input = argument.input.value
		lag = "1ms"
	}

	export "output" {
		value = testcomponents.passthrough.pt.output
	}
}

-- update/nested_module.river --
declare "a" {
	argument "input" {}

	export "output" {
		value = -argument.input.value
	}
}